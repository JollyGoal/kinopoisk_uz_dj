# Generated by Django 3.1.6 on 2021-02-22 12:27

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AgeRate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10, verbose_name='Возрастной рейтинг')),
            ],
            options={
                'verbose_name': 'Возрастной рейтинг',
                'verbose_name_plural': 'Возрастные рейтинги',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='Категории')),
                ('url', models.SlugField(max_length=160, unique=True)),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Имя')),
                ('url', models.SlugField(max_length=160, unique=True)),
            ],
            options={
                'verbose_name': 'Жанр',
                'verbose_name_plural': 'Жанры',
            },
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Название')),
                ('original_title', models.CharField(max_length=100, verbose_name='Оригинальное название фильма')),
                ('tagline', models.CharField(blank=True, max_length=100, null=True, verbose_name='Слоган')),
                ('description', models.TextField(verbose_name='Описание')),
                ('poster', models.ImageField(upload_to='movies/', verbose_name='Постер')),
                ('year', models.PositiveSmallIntegerField(default=2021, verbose_name='Дата выхода')),
                ('country', models.CharField(max_length=30, verbose_name='Страна')),
                ('world_premiere', models.DateField(default=datetime.date.today, verbose_name='Премьера в мире')),
                ('budget', models.PositiveSmallIntegerField(blank=True, help_text='укажите сумму в долларах', null=True, verbose_name='Бюджет')),
                ('fees_in_world', models.PositiveIntegerField(blank=True, help_text='укажите сумму в долларах', null=True, verbose_name='Сборы в мире')),
                ('duration', models.PositiveSmallIntegerField(verbose_name='Продолжительность (минут)')),
                ('episode', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Количество Эпизодов')),
                ('seasons', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Количество сезонов')),
                ('url', models.SlugField(blank=True, max_length=160, unique=True)),
                ('draft', models.BooleanField(default=False, verbose_name='Черновик')),
                ('age_rate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='basesite.agerate', verbose_name='Возрастной рейтинг')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='basesite.category', verbose_name='Категория')),
                ('genres', models.ManyToManyField(related_name='film_genres', to='basesite.Genre', verbose_name='Жанры')),
            ],
            options={
                'verbose_name': 'Фильмы и Сериалы',
                'verbose_name_plural': 'Фильмы и Сериалы',
            },
        ),
        migrations.CreateModel(
            name='ParentClassPerson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Имя')),
                ('age', models.PositiveSmallIntegerField(default=0, verbose_name='Возраст')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('image', models.ImageField(upload_to='people/', verbose_name='Изображение')),
                ('url', models.SlugField(max_length=160, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='RatingStar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.SmallIntegerField(default=0, verbose_name='Значение')),
            ],
            options={
                'verbose_name': 'Звезда рейтинга',
                'verbose_name_plural': 'Звезды рейтинга',
            },
        ),
        migrations.CreateModel(
            name='VideoTrailer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название трейлера')),
                ('file', models.FileField(upload_to='trailers/', verbose_name='Видео')),
            ],
            options={
                'verbose_name': 'Трейлер',
                'verbose_name_plural': 'Трейлеры',
            },
        ),
        migrations.CreateModel(
            name='Actor',
            fields=[
                ('parentclassperson_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='basesite.parentclassperson')),
            ],
            options={
                'verbose_name': 'Актеры',
                'verbose_name_plural': 'Актеры',
            },
            bases=('basesite.parentclassperson',),
        ),
        migrations.CreateModel(
            name='Director',
            fields=[
                ('parentclassperson_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='basesite.parentclassperson')),
            ],
            options={
                'verbose_name': 'Режиссер',
                'verbose_name_plural': 'Режиссеры',
            },
            bases=('basesite.parentclassperson',),
        ),
        migrations.CreateModel(
            name='Scenario',
            fields=[
                ('parentclassperson_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='basesite.parentclassperson')),
            ],
            options={
                'verbose_name': 'Сценарист',
                'verbose_name_plural': 'Сценаристы',
            },
            bases=('basesite.parentclassperson',),
        ),
        migrations.CreateModel(
            name='Reviews',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('text', models.TextField(max_length=5000, verbose_name='Сообщение')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review', to=settings.AUTH_USER_MODEL)),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='basesite.movie', verbose_name='фильм')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='basesite.reviews', verbose_name='Родитель')),
            ],
            options={
                'verbose_name': 'Отзыв',
                'verbose_name_plural': 'Отзывы',
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip', models.CharField(max_length=15, verbose_name='IP адрес')),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='basesite.movie', verbose_name='фильм')),
                ('star', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='basesite.ratingstar', verbose_name='звезда')),
            ],
            options={
                'verbose_name': 'Рейтинг',
                'verbose_name_plural': 'Рейтинги',
            },
        ),
        migrations.CreateModel(
            name='MovieShots',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='movie_shots/', verbose_name='Изображение')),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='basesite.movie', verbose_name='Фильм')),
            ],
            options={
                'verbose_name': 'Кадр из фильма',
                'verbose_name_plural': 'Кадры из фильма',
            },
        ),
        migrations.AddField(
            model_name='movie',
            name='trailer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='basesite.videotrailer', verbose_name='Трейлер'),
        ),
        migrations.AddField(
            model_name='movie',
            name='actors',
            field=models.ManyToManyField(related_name='film_actor', to='basesite.Actor', verbose_name='Актеры'),
        ),
        migrations.AddField(
            model_name='movie',
            name='directors',
            field=models.ManyToManyField(related_name='film_director', to='basesite.Director', verbose_name='Режиссер'),
        ),
        migrations.AddField(
            model_name='movie',
            name='scenario',
            field=models.ManyToManyField(related_name='film_scenario', to='basesite.Scenario', verbose_name='Сценаристы'),
        ),
    ]
